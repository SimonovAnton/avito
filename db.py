import psycopg2
from psycopg2.extensions import connection


#   Creates a connection to PostgreSQL.
def db_connection() -> connection:
    con: connection = psycopg2.connect(host='db',
                                       port=5432,
                                       database='postgres',
                                       user='postgres',
                                       password='postgres')
    print('PostgreSQL connection')
    return con


#   Disconnecting from the database. Argument is the object of the current connection.
def db_disconnection(con: connection) -> None:
    try:
        con.close()
        print('PostgreSQL connection is closed')
    except (Exception, psycopg2.DatabaseError) as e:
        print('Error while disconnecting PostgreSQL:', e)


#   Creates a table 'requests', whose rows contain the unique query id (ID), query (QUERY) and query region (REGION_ID).
def create_db() -> None:
    try:
        con = db_connection()
        cursor = con.cursor()

        create_table = '''CREATE TABLE IF NOT EXISTS requests
                                (ID  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                QUERY  TEXT NOT NULL,
                                REGION_ID INT NOT NULL,
                                UNIQUE (QUERY, REGION_ID));'''

        cursor.execute(create_table)

        cursor.close()
        con.commit()
        print('Table opened successfully in PostgreSQL ')

        if con:
            db_disconnection(con)

        create_items_count()

    except (Exception, psycopg2.DatabaseError) as e:
        print('Error while creating PostgreSQL table', e)


#   Creates a table 'items_count', whose rows contain the element id (ID), time for which the number of ads is
#   displayed (TIME), number of ads (COUNT) and id of the added request (REQUEST_ID, corresponds to request ID
#   in requests table).
def create_items_count() -> None:
    try:
        con = db_connection()
        cursor = con.cursor()

        create_table = '''CREATE TABLE IF NOT EXISTS items_count
                                (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                TIME  TIMESTAMP,
                                COUNT INT NOT NULL,
                                REQUEST_ID INT REFERENCES requests);'''

        cursor.execute(create_table)

        cursor.close()
        con.commit()
        print('Items count table opened successfully in PostgreSQL')
        db_disconnection(con)

    except (Exception, psycopg2.DatabaseError) as e:
        print('Error while creating PostgreSQL items count table', e)


if __name__ == '__main__':
    create_db()
    create_items_count()
